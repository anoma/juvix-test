module Test.JuvixUnit;

import Stdlib.Prelude open;

import Stdlib.Debug.Fail as Fail;

type Assertion :=
  | pass
  | fail String;

isFail : Assertion -> Bool
  | pass := false
  | (fail _) := true;

type Test :=
  testCase {
    name : String;
    assertion : Assertion
  };

type TestSuite :=
  testSuite {
    name : String;
    tests : List Test
  };

anyFail (suite : TestSuite) : Bool :=
  any (isFail ∘ Test.assertion) (TestSuite.tests suite);

runTests : List Test -> IO :=
  let
    showAssertion : Assertion -> String
      | pass := "OK"
      | (fail msg) := "FAIL: " ++str msg;
    runTest (t : Test) : IO :=
      printStringLn
        (Test.name t
          ++str "\t\t"
          ++str showAssertion (Test.assertion t));
  in foldr λ {t acc := runTest t >> acc} (printString "");

runTestSuite (suite : TestSuite) : IO :=
  printStringLn
      ("Test suite '" ++str TestSuite.name suite ++str "'")
    >> runTests (TestSuite.tests suite)
    >> printStringLn
      ("All tests from test suite '"
        ++str TestSuite.name suite
        ++str "' complete")
    >> if
      (anyFail suite)
      (Fail.failwith "Suite failed")
      (printStringLn "Suite passed");

failWhen (msg : String) (b : Bool) : Assertion :=
  if b (Fail.failwith msg) pass;

failUnless (msg : String) (b : Bool) : Assertion :=
  failWhen msg (not b);

assertTrue : String -> Bool -> Assertion := failUnless;

assertFalse : String -> Bool -> Assertion := failWhen;

assertJust {A} (msg : String) : Maybe A -> Assertion :=
  maybe (Fail.failwith msg) (const pass);

assertNothing {A} (mkMsg : A -> String)
  : Maybe A -> Assertion :=
  maybe pass (Fail.failwith ∘ mkMsg);

assertEqual {A} {{Eq A}} (msg : String) (a1 a2 : A)
  : Assertion := failUnless msg (Eq.eq a1 a2);
