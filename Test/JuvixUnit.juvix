module Test.JuvixUnit;

import Stdlib.Prelude open hiding {fail};
import Stdlib.Debug.Fail as Fail;
import Ansi open;

type Assertion :=
  | pass
  | fail String;

open Assertion public;

isFail : Assertion -> Bool
  | pass := false
  | (fail _) := true;

type Test :=
  mk@{
    name : String;
    assertion : Assertion;
  };

testCase (name : String) (assertion : Assertion) : TestSuite :=
  TestSuite.single
    Test.mk@{
      name;
      assertion;
    };

type TestSuite :=
  | group@{
      name : String;
      tests : List TestSuite;
    }
  | single@{
      test : Test;
    }
with

  name : TestSuite -> String
    | (group name _) := name
    | (single t) := Test.name t;

end;

anyFail (s : TestSuite) : Bool := anyFailList [s];

good : String -> String :=
  ansi (Ansi.append (Ansi.style Ansi.bold) (Ansi.color Ansi.green));

bad : String -> String :=
  ansi (Ansi.append (Ansi.style Ansi.bold) (Ansi.color Ansi.red));

important : String -> String := ansi (Ansi.style Ansi.bold);

anyFailList : List TestSuite -> Bool
  | [] := false
  | (TestSuite.single t :: ts) := isFail (Test.assertion t) || anyFailList ts
  | (TestSuite.group _ l :: ts) := anyFailList l || anyFailList ts;

indent (lvl : Nat) (str : String) : String :=
  let
    space := foldl (++str) "" (replicate lvl "  ");
  in space ++str str;

runTests (lvl : Nat) : List Test -> IO :=
  let
    showAssertion : Assertion -> String
      | pass := good "OK"
      | (fail msg) := bad ("FAIL: " ++str msg);
    runTest (t : Test) : IO :=
      printStringLn
        (indent
          lvl
          (Test.name t ++str " " ++str showAssertion (Test.assertion t)));
  in foldr λ{t acc := runTest t >>> acc} (printString "");

runTestSuites : List TestSuite -> IO :=
  let
    go (lvl : Nat) : List TestSuite -> IO
      | [] := printString ""
      | (TestSuite.single t :: ts) := runTests lvl [t] >>> go lvl ts
      | (TestSuite.group name tests :: ts) :=
        printStringLn (indent lvl ("Test suite " ++str important name))
          >>> go (1 + lvl) tests
          >>> printStringLn
            (indent
              lvl
              ("All tests from test suite "
                ++str important name
                ++str " complete"))
          >>> go lvl ts;
  in go 0;

runTestSuite (suite : TestSuite) : IO :=
  runTestSuites [suite]
    >>> ite
      (anyFail suite)
      (Fail.failwith (bad "Suite failed"))
      (printStringLn (good "Suite passed"));

failWhen (msg : String) (b : Bool) : Assertion := ite b (fail msg) pass;

failUnless (msg : String) (b : Bool) : Assertion := failWhen msg (not b);

assertTrue : String -> Bool -> Assertion := failUnless;

assertFalse : String -> Bool -> Assertion := failWhen;

assertJust {A} (msg : String) : Maybe A -> Assertion :=
  maybe (fail msg) (const pass);

assertNothing {A} (mkMsg : A -> String) : Maybe A -> Assertion :=
  maybe pass (mkMsg >> fail);

assertEqual {A} {{Eq A}} (msg : String) (a1 a2 : A) : Assertion :=
  failUnless msg (a1 == a2);

assertGreater {A} {{Ord A}} (msg : String) (a1 a2 : A) : Assertion :=
  failUnless msg (a1 > a2);

assertGreaterEqual {A} {{Ord A}} (msg : String) (a1 a2 : A) : Assertion :=
  failUnless msg (a1 >= a2);

assertLess {A} {{Ord A}} (msg : String) (a1 a2 : A) : Assertion :=
  failUnless msg (a1 < a2);

assertLessEqual {A} {{Ord A}} (msg : String) (a1 a2 : A) : Assertion :=
  failUnless msg (a1 <= a2);

mkExpectMsg
  {A} {{Show A}} (actual : A) (msg : String) (expected : A) : String :=
  "Expected " ++str Show.show actual ++str msg ++str Show.show expected;

expectTrue (actual : Bool) : Assertion :=
  assertTrue (mkExpectMsg actual " to be " true) actual;

expectFalse (actual : Bool) : Assertion :=
  assertFalse (mkExpectMsg actual " to be " false) actual;

expectEqual {A} {{Eq A}} {{Show A}} (expected actual : A) : Assertion :=
  assertEqual (mkExpectMsg actual " == " expected) expected actual;

expectGreater {A} {{Ord A}} {{Show A}} (expected actual : A) : Assertion :=
  assertGreater (mkExpectMsg actual " > " expected) expected actual;

expectGreaterEqual {A} {{Ord A}} {{Show A}} (expected actual : A) : Assertion :=
  assertGreaterEqual (mkExpectMsg actual " >= " expected) expected actual;

expectLess {A} {{Ord A}} {{Show A}} (expected actual : A) : Assertion :=
  assertLess (mkExpectMsg actual " < " expected) expected actual;

expectLessEqual {A} {{Ord A}} {{Show A}} (expected actual : A) : Assertion :=
  assertLessEqual (mkExpectMsg actual " <= " expected) expected actual;

expectJust {A} {{Show A}} (expected : A) (actual : Maybe A) : Assertion :=
  assertJust
    (mkExpectMsg "nothing" " to be " ("just " ++str Show.show expected))
    actual;

expectNothing {A} {{Show A}} (actual : Maybe A) : Assertion :=
  assertNothing
    λ{x := mkExpectMsg ("just " ++str Show.show x) " to be " "nothing"}
    actual;
